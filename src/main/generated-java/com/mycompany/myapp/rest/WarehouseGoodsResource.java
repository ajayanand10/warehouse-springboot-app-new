/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.mycompany.myapp.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.beans.PropertyEditorSupport;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.mycompany.myapp.domain.WarehouseGoods;
import com.mycompany.myapp.domain.WarehouseGoodsPk;
import com.mycompany.myapp.dto.WarehouseGoodsDTO;
import com.mycompany.myapp.dto.WarehouseGoodsDTOService;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.WarehouseGoodsRepository;
import com.mycompany.myapp.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/warehouseGoodss")
public class WarehouseGoodsResource {

    private final Logger log = LoggerFactory.getLogger(WarehouseGoodsResource.class);

    @Inject
    private WarehouseGoodsRepository warehouseGoodsRepository;
    @Inject
    private WarehouseGoodsDTOService warehouseGoodsDTOService;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(WarehouseGoodsPk.class, new PropertyEditorSupport() {
            @Override
            public String getAsText() {
                return getValue().toString();
            }

            @Override
            public void setAsText(String text) throws IllegalArgumentException {
                setValue(WarehouseGoodsPk.fromString(text));
            }
        });
    }

    /**
     * Create a new WarehouseGoods.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<WarehouseGoodsDTO> create(@RequestBody WarehouseGoodsDTO warehouseGoodsDTO) throws URISyntaxException {

        log.debug("Create WarehouseGoodsDTO : {}", warehouseGoodsDTO);

        if (warehouseGoodsDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create WarehouseGoods with existing ID").body(null);
        }

        WarehouseGoodsDTO result = warehouseGoodsDTOService.save(warehouseGoodsDTO);

        return ResponseEntity.created(new URI("/api/warehouseGoodss/" + result.id)).body(result);
    }

    /**
    * Find by id WarehouseGoods.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<WarehouseGoodsDTO> findById(@PathVariable WarehouseGoodsPk id) throws URISyntaxException {

        log.debug("Find by id WarehouseGoods : {}", id);

        return Optional.ofNullable(warehouseGoodsDTOService.findOne(id)).map(warehouseGoodsDTO -> new ResponseEntity<>(warehouseGoodsDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update WarehouseGoods.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<WarehouseGoodsDTO> update(@RequestBody WarehouseGoodsDTO warehouseGoodsDTO) throws URISyntaxException {

        log.debug("Update WarehouseGoodsDTO : {}", warehouseGoodsDTO);

        if (!warehouseGoodsDTO.isIdSet()) {
            return create(warehouseGoodsDTO);
        }

        WarehouseGoodsDTO result = warehouseGoodsDTOService.save(warehouseGoodsDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of WarehouseGoods using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<WarehouseGoodsDTO>> findAll(@RequestBody PageRequestByExample<WarehouseGoodsDTO> prbe) throws URISyntaxException {
        PageResponse<WarehouseGoodsDTO> pageResponse = warehouseGoodsDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<WarehouseGoodsDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<WarehouseGoodsDTO> results = warehouseGoodsDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id WarehouseGoods.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable WarehouseGoodsPk id) throws URISyntaxException {

        log.debug("Delete by id WarehouseGoods : {}", id);

        try {
            warehouseGoodsRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}