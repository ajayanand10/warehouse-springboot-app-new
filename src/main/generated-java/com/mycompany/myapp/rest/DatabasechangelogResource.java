/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.mycompany.myapp.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.mycompany.myapp.domain.Databasechangelog;
import com.mycompany.myapp.dto.DatabasechangelogDTO;
import com.mycompany.myapp.dto.DatabasechangelogDTOService;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.DatabasechangelogRepository;
import com.mycompany.myapp.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/databasechangelogs")
public class DatabasechangelogResource {

    private final Logger log = LoggerFactory.getLogger(DatabasechangelogResource.class);

    @Inject
    private DatabasechangelogRepository databasechangelogRepository;
    @Inject
    private DatabasechangelogDTOService databasechangelogDTOService;

    /**
     * Create a new Databasechangelog.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<DatabasechangelogDTO> create(@RequestBody DatabasechangelogDTO databasechangelogDTO) throws URISyntaxException {

        log.debug("Create DatabasechangelogDTO : {}", databasechangelogDTO);

        if (databasechangelogDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create Databasechangelog with existing ID").body(null);
        }

        DatabasechangelogDTO result = databasechangelogDTOService.save(databasechangelogDTO);

        return ResponseEntity.created(new URI("/api/databasechangelogs/" + result.id)).body(result);
    }

    /**
    * Find by id Databasechangelog.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<DatabasechangelogDTO> findById(@PathVariable String id) throws URISyntaxException {

        log.debug("Find by id Databasechangelog : {}", id);

        return Optional.ofNullable(databasechangelogDTOService.findOne(id))
                .map(databasechangelogDTO -> new ResponseEntity<>(databasechangelogDTO, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update Databasechangelog.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<DatabasechangelogDTO> update(@RequestBody DatabasechangelogDTO databasechangelogDTO) throws URISyntaxException {

        log.debug("Update DatabasechangelogDTO : {}", databasechangelogDTO);

        if (!databasechangelogDTO.isIdSet()) {
            return create(databasechangelogDTO);
        }

        DatabasechangelogDTO result = databasechangelogDTOService.save(databasechangelogDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of Databasechangelog using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<DatabasechangelogDTO>> findAll(@RequestBody PageRequestByExample<DatabasechangelogDTO> prbe) throws URISyntaxException {
        PageResponse<DatabasechangelogDTO> pageResponse = databasechangelogDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<DatabasechangelogDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<DatabasechangelogDTO> results = databasechangelogDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id Databasechangelog.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable String id) throws URISyntaxException {

        log.debug("Delete by id Databasechangelog : {}", id);

        try {
            databasechangelogRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}