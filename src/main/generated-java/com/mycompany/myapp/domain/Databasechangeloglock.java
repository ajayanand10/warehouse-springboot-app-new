/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import java.io.Serializable;
import java.time.Instant;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

@Entity
@Table(name = "databasechangeloglock")
public class Databasechangeloglock implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Databasechangeloglock.class.getName());

    // Raw attributes
    private Integer id;
    private Boolean locked;
    private String lockedby;
    private Instant lockgranted;

    @Override
    public String entityClassName() {
        return Databasechangeloglock.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "id", precision = 10)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Databasechangeloglock id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [locked] ------------------------

    @NotNull
    @Column(name = "locked", nullable = false, length = 1)
    public Boolean getLocked() {
        return locked;
    }

    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    public Databasechangeloglock locked(Boolean locked) {
        setLocked(locked);
        return this;
    }
    // -- [lockedby] ------------------------

    @Size(max = 255)
    @Column(name = "lockedby")
    public String getLockedby() {
        return lockedby;
    }

    public void setLockedby(String lockedby) {
        this.lockedby = lockedby;
    }

    public Databasechangeloglock lockedby(String lockedby) {
        setLockedby(lockedby);
        return this;
    }
    // -- [lockgranted] ------------------------

    @Column(name = "lockgranted", length = 29)
    public Instant getLockgranted() {
        return lockgranted;
    }

    public void setLockgranted(Instant lockgranted) {
        this.lockgranted = lockgranted;
    }

    public Databasechangeloglock lockgranted(Instant lockgranted) {
        setLockgranted(lockgranted);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Databasechangeloglock withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Databasechangeloglock && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Databasechangeloglock instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("locked", getLocked()) //
                .add("lockedby", getLockedby()) //
                .add("lockgranted", getLockgranted()) //
                .toString();
    }
}