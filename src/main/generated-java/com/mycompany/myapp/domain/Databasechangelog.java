/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/Entity.java.e.vm
 */
package com.mycompany.myapp.domain;

import java.io.Serializable;
import java.time.Instant;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotEmpty;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;

@Entity
@Table(name = "databasechangelog")
public class Databasechangelog implements Identifiable<String>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Databasechangelog.class.getName());

    // Raw attributes
    private String id;
    private String author;
    private String comments;
    private String contexts;
    private Instant dateexecuted;
    private String description;
    private String exectype;
    private String filename;
    private String labels;
    private String liquibase;
    private String md5sum;
    private Integer orderexecuted;
    private String tag;

    @Override
    public String entityClassName() {
        return Databasechangelog.class.getSimpleName();
    }

    // -- [id] ------------------------

    @Override
    @NotEmpty
    @Size(max = 255)
    @Column(name = "id")
    @Id
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public Databasechangelog id(String id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    public boolean isIdSet() {
        return id != null && !id.isEmpty();
    }
    // -- [author] ------------------------

    @NotEmpty
    @Size(max = 255)
    @Column(name = "author", nullable = false)
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Databasechangelog author(String author) {
        setAuthor(author);
        return this;
    }
    // -- [comments] ------------------------

    @Size(max = 255)
    @Column(name = "comments")
    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Databasechangelog comments(String comments) {
        setComments(comments);
        return this;
    }
    // -- [contexts] ------------------------

    @Size(max = 255)
    @Column(name = "contexts")
    public String getContexts() {
        return contexts;
    }

    public void setContexts(String contexts) {
        this.contexts = contexts;
    }

    public Databasechangelog contexts(String contexts) {
        setContexts(contexts);
        return this;
    }
    // -- [dateexecuted] ------------------------

    @NotNull
    @Column(name = "dateexecuted", nullable = false, length = 29)
    public Instant getDateexecuted() {
        return dateexecuted;
    }

    public void setDateexecuted(Instant dateexecuted) {
        this.dateexecuted = dateexecuted;
    }

    public Databasechangelog dateexecuted(Instant dateexecuted) {
        setDateexecuted(dateexecuted);
        return this;
    }
    // -- [description] ------------------------

    @Size(max = 255)
    @Column(name = "description")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Databasechangelog description(String description) {
        setDescription(description);
        return this;
    }
    // -- [exectype] ------------------------

    @NotEmpty
    @Size(max = 10)
    @Column(name = "exectype", nullable = false, length = 10)
    public String getExectype() {
        return exectype;
    }

    public void setExectype(String exectype) {
        this.exectype = exectype;
    }

    public Databasechangelog exectype(String exectype) {
        setExectype(exectype);
        return this;
    }
    // -- [filename] ------------------------

    @NotEmpty
    @Size(max = 255)
    @Column(name = "filename", nullable = false)
    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }

    public Databasechangelog filename(String filename) {
        setFilename(filename);
        return this;
    }
    // -- [labels] ------------------------

    @Size(max = 255)
    @Column(name = "labels")
    public String getLabels() {
        return labels;
    }

    public void setLabels(String labels) {
        this.labels = labels;
    }

    public Databasechangelog labels(String labels) {
        setLabels(labels);
        return this;
    }
    // -- [liquibase] ------------------------

    @Size(max = 20)
    @Column(name = "liquibase", length = 20)
    public String getLiquibase() {
        return liquibase;
    }

    public void setLiquibase(String liquibase) {
        this.liquibase = liquibase;
    }

    public Databasechangelog liquibase(String liquibase) {
        setLiquibase(liquibase);
        return this;
    }
    // -- [md5sum] ------------------------

    @Size(max = 35)
    @Column(name = "md5sum", length = 35)
    public String getMd5sum() {
        return md5sum;
    }

    public void setMd5sum(String md5sum) {
        this.md5sum = md5sum;
    }

    public Databasechangelog md5sum(String md5sum) {
        setMd5sum(md5sum);
        return this;
    }
    // -- [orderexecuted] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "orderexecuted", nullable = false, precision = 10)
    public Integer getOrderexecuted() {
        return orderexecuted;
    }

    public void setOrderexecuted(Integer orderexecuted) {
        this.orderexecuted = orderexecuted;
    }

    public Databasechangelog orderexecuted(Integer orderexecuted) {
        setOrderexecuted(orderexecuted);
        return this;
    }
    // -- [tag] ------------------------

    @Size(max = 255)
    @Column(name = "tag")
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public Databasechangelog tag(String tag) {
        setTag(tag);
        return this;
    }

    /**
     * Apply the default values.
     */
    public Databasechangelog withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Databasechangelog && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Databasechangelog instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("author", getAuthor()) //
                .add("comments", getComments()) //
                .add("contexts", getContexts()) //
                .add("dateexecuted", getDateexecuted()) //
                .add("description", getDescription()) //
                .add("exectype", getExectype()) //
                .add("filename", getFilename()) //
                .add("labels", getLabels()) //
                .add("liquibase", getLiquibase()) //
                .add("md5sum", getMd5sum()) //
                .add("orderexecuted", getOrderexecuted()) //
                .add("tag", getTag()) //
                .toString();
    }
}