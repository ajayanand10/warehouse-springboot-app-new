/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/domain/CompositePk.java.cpk.vm
 */
package com.mycompany.myapp.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;

import com.google.common.base.Objects;

@Embeddable

public class WarehouseGoodsPk implements Comparable<WarehouseGoodsPk>, Serializable {
    private static final long serialVersionUID = 1L;

    private Integer warehouseId;
    private Integer typeOfGoodsId;

    public WarehouseGoodsPk() {
    }

    public WarehouseGoodsPk(Integer warehouseId, Integer typeOfGoodsId) {
        this.warehouseId = warehouseId;
        this.typeOfGoodsId = typeOfGoodsId;
    }

    /**
     * Helper to determine if this composite primary key is fully set.
     */
    @Transient
    public boolean areFieldsSet() {
        return isWarehouseIdSet() && isTypeOfGoodsIdSet();
    }

    /**
     * Helper method to determine if this instance is considered empty, that is,
     * if all the non primary key columns are null.
     */
    @Transient
    public boolean isEmpty() {
        return !isWarehouseIdSet() && !isTypeOfGoodsIdSet();
    }

    //-- [warehouseId] ------------------------------

    @Column(name = "warehouse_id", nullable = false, precision = 10)
    public Integer getWarehouseId() {
        return warehouseId;
    }

    public void setWarehouseId(Integer warehouseId) {
        this.warehouseId = warehouseId;
    }

    public WarehouseGoodsPk warehouseId(Integer warehouseId) {
        setWarehouseId(warehouseId);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isWarehouseIdSet() {
        return getWarehouseId() != null;
    }

    //-- [typeOfGoodsId] ------------------------------

    @Column(name = "type_of_goods_id", nullable = false, precision = 10)
    public Integer getTypeOfGoodsId() {
        return typeOfGoodsId;
    }

    public void setTypeOfGoodsId(Integer typeOfGoodsId) {
        this.typeOfGoodsId = typeOfGoodsId;
    }

    public WarehouseGoodsPk typeOfGoodsId(Integer typeOfGoodsId) {
        setTypeOfGoodsId(typeOfGoodsId);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isTypeOfGoodsIdSet() {
        return getTypeOfGoodsId() != null;
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof WarehouseGoodsPk && hashCode() == other.hashCode());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getWarehouseId(), //
                getTypeOfGoodsId());
    }

    @Override
    public int compareTo(WarehouseGoodsPk other) {
        return other == null ? -1 : hashCode() - other.hashCode();
    }

    /**
    * Return the string representation of the composite primary key, it should be reversable by version produced by the {@link #String()} method
    */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        if (isWarehouseIdSet()) {
            result.append(getWarehouseId());
        }
        result.append("_");
        if (isTypeOfGoodsIdSet()) {
            result.append(getTypeOfGoodsId());
        }

        return result.toString();
    }

    /**
     * Build an instance from a string version produced by the {@link #toString()} method
     */
    public static WarehouseGoodsPk fromString(String string) {
        WarehouseGoodsPk result = new WarehouseGoodsPk();
        String[] values = string.split("_");
        if (isNotEmpty(values[0])) {
            result.setWarehouseId(Integer.valueOf(values[0]));
        }
        if (isNotEmpty(values[1])) {
            result.setTypeOfGoodsId(Integer.valueOf(values[1]));
        }

        return result;
    }
}
