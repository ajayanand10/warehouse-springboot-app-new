/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Databasechangelog;
import com.mycompany.myapp.domain.Databasechangelog_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.DatabasechangelogRepository;

/**
 * A simple DTO Facility for Databasechangelog.
 */
@Service
public class DatabasechangelogDTOService {

    @Inject
    private DatabasechangelogRepository databasechangelogRepository;

    @Transactional(readOnly = true)
    public DatabasechangelogDTO findOne(String id) {
        return toDTO(databasechangelogRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<DatabasechangelogDTO> complete(String query, int maxResults) {
        List<Databasechangelog> results = databasechangelogRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<DatabasechangelogDTO> findAll(PageRequestByExample<DatabasechangelogDTO> req) {
        Example<Databasechangelog> example = null;
        Databasechangelog databasechangelog = toEntity(req.example);

        if (databasechangelog != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Databasechangelog_.id.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.author.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.comments.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.contexts.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.description.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.exectype.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.filename.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.labels.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.liquibase.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.md5sum.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Databasechangelog_.tag.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(databasechangelog, matcher);
        }

        Page<Databasechangelog> page;
        if (example != null) {
            page = databasechangelogRepository.findAll(example, req.toPageable());
        } else {
            page = databasechangelogRepository.findAll(req.toPageable());
        }

        List<DatabasechangelogDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public DatabasechangelogDTO save(DatabasechangelogDTO dto) {
        if (dto == null) {
            return null;
        }

        final Databasechangelog databasechangelog;

        if (dto.isIdSet()) {
            Databasechangelog databasechangelogTmp = databasechangelogRepository.findOne(dto.id);
            if (databasechangelogTmp != null) {
                databasechangelog = databasechangelogTmp;
            } else {
                databasechangelog = new Databasechangelog();
                databasechangelog.setId(dto.id);
            }
        } else {
            databasechangelog = new Databasechangelog();
        }

        databasechangelog.setAuthor(dto.author);

        databasechangelog.setComments(dto.comments);

        databasechangelog.setContexts(dto.contexts);

        databasechangelog.setDateexecuted(dto.dateexecuted);

        databasechangelog.setDescription(dto.description);

        databasechangelog.setExectype(dto.exectype);

        databasechangelog.setFilename(dto.filename);

        databasechangelog.setLabels(dto.labels);

        databasechangelog.setLiquibase(dto.liquibase);

        databasechangelog.setMd5sum(dto.md5sum);

        databasechangelog.setOrderexecuted(dto.orderexecuted);

        databasechangelog.setTag(dto.tag);

        return toDTO(databasechangelogRepository.save(databasechangelog));
    }

    /**
     * Converts the passed databasechangelog to a DTO.
     */
    public DatabasechangelogDTO toDTO(Databasechangelog databasechangelog) {
        return toDTO(databasechangelog, 1);
    }

    /**
     * Converts the passed databasechangelog to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param databasechangelog
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public DatabasechangelogDTO toDTO(Databasechangelog databasechangelog, int depth) {
        if (databasechangelog == null) {
            return null;
        }

        DatabasechangelogDTO dto = new DatabasechangelogDTO();

        dto.id = databasechangelog.getId();
        dto.author = databasechangelog.getAuthor();
        dto.comments = databasechangelog.getComments();
        dto.contexts = databasechangelog.getContexts();
        dto.dateexecuted = databasechangelog.getDateexecuted();
        dto.description = databasechangelog.getDescription();
        dto.exectype = databasechangelog.getExectype();
        dto.filename = databasechangelog.getFilename();
        dto.labels = databasechangelog.getLabels();
        dto.liquibase = databasechangelog.getLiquibase();
        dto.md5sum = databasechangelog.getMd5sum();
        dto.orderexecuted = databasechangelog.getOrderexecuted();
        dto.tag = databasechangelog.getTag();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Databasechangelog.
     * Convenient for query by example.
     */
    public Databasechangelog toEntity(DatabasechangelogDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Databasechangelog.
     * Convenient for query by example.
     */
    public Databasechangelog toEntity(DatabasechangelogDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Databasechangelog databasechangelog = new Databasechangelog();

        databasechangelog.setId(dto.id);
        databasechangelog.setAuthor(dto.author);
        databasechangelog.setComments(dto.comments);
        databasechangelog.setContexts(dto.contexts);
        databasechangelog.setDateexecuted(dto.dateexecuted);
        databasechangelog.setDescription(dto.description);
        databasechangelog.setExectype(dto.exectype);
        databasechangelog.setFilename(dto.filename);
        databasechangelog.setLabels(dto.labels);
        databasechangelog.setLiquibase(dto.liquibase);
        databasechangelog.setMd5sum(dto.md5sum);
        databasechangelog.setOrderexecuted(dto.orderexecuted);
        databasechangelog.setTag(dto.tag);
        if (depth-- > 0) {
        }

        return databasechangelog;
    }
}