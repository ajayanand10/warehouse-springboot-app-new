/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Goods;
import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.domain.WarehouseGoods;
import com.mycompany.myapp.domain.WarehouseGoodsPk;
import com.mycompany.myapp.domain.WarehouseGoods_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.GoodsRepository;
import com.mycompany.myapp.repository.WarehouseGoodsRepository;
import com.mycompany.myapp.repository.WarehouseRepository;

/**
 * A simple DTO Facility for WarehouseGoods.
 */
@Service
public class WarehouseGoodsDTOService {

    @Inject
    private WarehouseGoodsRepository warehouseGoodsRepository;
    @Inject
    private GoodsDTOService goodsDTOService;
    @Inject
    private GoodsRepository goodsRepository;
    @Inject
    private WarehouseDTOService warehouseDTOService;
    @Inject
    private WarehouseRepository warehouseRepository;

    @Transactional(readOnly = true)
    public WarehouseGoodsDTO findOne(WarehouseGoodsPk id) {
        return toDTO(warehouseGoodsRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WarehouseGoodsDTO> complete(String query, int maxResults) {
        List<WarehouseGoods> results = warehouseGoodsRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WarehouseGoodsDTO> findAll(PageRequestByExample<WarehouseGoodsDTO> req) {
        Example<WarehouseGoods> example = null;
        WarehouseGoods warehouseGoods = toEntity(req.example);

        if (warehouseGoods != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(warehouseGoods, matcher);
        }

        Page<WarehouseGoods> page;
        if (example != null) {
            page = warehouseGoodsRepository.findAll(example, req.toPageable());
        } else {
            page = warehouseGoodsRepository.findAll(req.toPageable());
        }

        List<WarehouseGoodsDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WarehouseGoodsDTO save(WarehouseGoodsDTO dto) {
        if (dto == null) {
            return null;
        }

        final WarehouseGoods warehouseGoods;

        if (dto.isIdSet()) {
            WarehouseGoods warehouseGoodsTmp = warehouseGoodsRepository.findOne(dto.id);
            if (warehouseGoodsTmp != null) {
                warehouseGoods = warehouseGoodsTmp;
            } else {
                warehouseGoods = new WarehouseGoods();
                warehouseGoods.setId(dto.id);
            }
        } else {
            warehouseGoods = new WarehouseGoods();
        }

        warehouseGoods.setCreationDate(dto.creationDate);

        warehouseGoods.setCreationAuthor(dto.creationAuthor);

        warehouseGoods.setLastModificationDate(dto.lastModificationDate);

        warehouseGoods.setLastModificationAuthor(dto.lastModificationAuthor);

        warehouseGoods.setVersion(dto.version);

        if (dto.typeOfGoods == null) {
            warehouseGoods.setTypeOfGoods(null);
        } else {
            Goods typeOfGoods = warehouseGoods.getTypeOfGoods();
            if (typeOfGoods == null || (typeOfGoods.getId().compareTo(dto.typeOfGoods.id) != 0)) {
                warehouseGoods.setTypeOfGoods(goodsRepository.findOne(dto.typeOfGoods.id));
            }
        }

        if (dto.warehouse == null) {
            warehouseGoods.setWarehouse(null);
        } else {
            Warehouse warehouse = warehouseGoods.getWarehouse();
            if (warehouse == null || (warehouse.getId().compareTo(dto.warehouse.id) != 0)) {
                warehouseGoods.setWarehouse(warehouseRepository.findOne(dto.warehouse.id));
            }
        }

        return toDTO(warehouseGoodsRepository.save(warehouseGoods));
    }

    /**
     * Converts the passed warehouseGoods to a DTO.
     */
    public WarehouseGoodsDTO toDTO(WarehouseGoods warehouseGoods) {
        return toDTO(warehouseGoods, 1);
    }

    /**
     * Converts the passed warehouseGoods to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param warehouseGoods
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WarehouseGoodsDTO toDTO(WarehouseGoods warehouseGoods, int depth) {
        if (warehouseGoods == null) {
            return null;
        }

        WarehouseGoodsDTO dto = new WarehouseGoodsDTO();

        dto.id = warehouseGoods.getId();
        dto.creationDate = warehouseGoods.getCreationDate();
        dto.creationAuthor = warehouseGoods.getCreationAuthor();
        dto.lastModificationDate = warehouseGoods.getLastModificationDate();
        dto.lastModificationAuthor = warehouseGoods.getLastModificationAuthor();
        dto.version = warehouseGoods.getVersion();
        if (depth-- > 0) {
            dto.typeOfGoods = goodsDTOService.toDTO(warehouseGoods.getTypeOfGoods(), depth);
            dto.warehouse = warehouseDTOService.toDTO(warehouseGoods.getWarehouse(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a WarehouseGoods.
     * Convenient for query by example.
     */
    public WarehouseGoods toEntity(WarehouseGoodsDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a WarehouseGoods.
     * Convenient for query by example.
     */
    public WarehouseGoods toEntity(WarehouseGoodsDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        WarehouseGoods warehouseGoods = new WarehouseGoods();

        warehouseGoods.setId(dto.id);
        warehouseGoods.setCreationDate(dto.creationDate);
        warehouseGoods.setCreationAuthor(dto.creationAuthor);
        warehouseGoods.setLastModificationDate(dto.lastModificationDate);
        warehouseGoods.setLastModificationAuthor(dto.lastModificationAuthor);
        warehouseGoods.setVersion(dto.version);
        if (depth-- > 0) {
            warehouseGoods.setTypeOfGoods(goodsDTOService.toEntity(dto.typeOfGoods, depth));
            warehouseGoods.setWarehouse(warehouseDTOService.toEntity(dto.warehouse, depth));
        }

        return warehouseGoods;
    }
}