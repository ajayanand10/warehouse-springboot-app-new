/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Rate;
import com.mycompany.myapp.domain.Rate_;
import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.RateRepository;
import com.mycompany.myapp.repository.WarehouseRepository;

/**
 * A simple DTO Facility for Rate.
 */
@Service
public class RateDTOService {

    @Inject
    private RateRepository rateRepository;
    @Inject
    private WarehouseDTOService warehouseDTOService;
    @Inject
    private WarehouseRepository warehouseRepository;

    @Transactional(readOnly = true)
    public RateDTO findOne(Integer id) {
        return toDTO(rateRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<RateDTO> complete(String query, int maxResults) {
        List<Rate> results = rateRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<RateDTO> findAll(PageRequestByExample<RateDTO> req) {
        Example<Rate> example = null;
        Rate rate = toEntity(req.example);

        if (rate != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Rate_.description.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Rate_.storage.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Rate_.loading.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Rate_.unloading.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(rate, matcher);
        }

        Page<Rate> page;
        if (example != null) {
            page = rateRepository.findAll(example, req.toPageable());
        } else {
            page = rateRepository.findAll(req.toPageable());
        }

        List<RateDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public RateDTO save(RateDTO dto) {
        if (dto == null) {
            return null;
        }

        final Rate rate;

        if (dto.isIdSet()) {
            Rate rateTmp = rateRepository.findOne(dto.id);
            if (rateTmp != null) {
                rate = rateTmp;
            } else {
                rate = new Rate();
                rate.setId(dto.id);
            }
        } else {
            rate = new Rate();
        }

        rate.setDescription(dto.description);

        rate.setStorage(dto.storage);

        rate.setLabor(dto.labor);

        rate.setLoading(dto.loading);

        rate.setUnloading(dto.unloading);

        rate.setCreationDate(dto.creationDate);

        rate.setCreationAuthor(dto.creationAuthor);

        rate.setLastModificationDate(dto.lastModificationDate);

        rate.setLastModificationAuthor(dto.lastModificationAuthor);

        rate.setVersion(dto.version);

        if (dto.warehouse == null) {
            rate.setWarehouse(null);
        } else {
            Warehouse warehouse = rate.getWarehouse();
            if (warehouse == null || (warehouse.getId().compareTo(dto.warehouse.id) != 0)) {
                rate.setWarehouse(warehouseRepository.findOne(dto.warehouse.id));
            }
        }

        return toDTO(rateRepository.save(rate));
    }

    /**
     * Converts the passed rate to a DTO.
     */
    public RateDTO toDTO(Rate rate) {
        return toDTO(rate, 1);
    }

    /**
     * Converts the passed rate to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param rate
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public RateDTO toDTO(Rate rate, int depth) {
        if (rate == null) {
            return null;
        }

        RateDTO dto = new RateDTO();

        dto.id = rate.getId();
        dto.description = rate.getDescription();
        dto.storage = rate.getStorage();
        dto.labor = rate.getLabor();
        dto.loading = rate.getLoading();
        dto.unloading = rate.getUnloading();
        dto.creationDate = rate.getCreationDate();
        dto.creationAuthor = rate.getCreationAuthor();
        dto.lastModificationDate = rate.getLastModificationDate();
        dto.lastModificationAuthor = rate.getLastModificationAuthor();
        dto.version = rate.getVersion();
        if (depth-- > 0) {
            dto.warehouse = warehouseDTOService.toDTO(rate.getWarehouse(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Rate.
     * Convenient for query by example.
     */
    public Rate toEntity(RateDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Rate.
     * Convenient for query by example.
     */
    public Rate toEntity(RateDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Rate rate = new Rate();

        rate.setId(dto.id);
        rate.setDescription(dto.description);
        rate.setStorage(dto.storage);
        rate.setLabor(dto.labor);
        rate.setLoading(dto.loading);
        rate.setUnloading(dto.unloading);
        rate.setCreationDate(dto.creationDate);
        rate.setCreationAuthor(dto.creationAuthor);
        rate.setLastModificationDate(dto.lastModificationDate);
        rate.setLastModificationAuthor(dto.lastModificationAuthor);
        rate.setVersion(dto.version);
        if (depth-- > 0) {
            rate.setWarehouse(warehouseDTOService.toEntity(dto.warehouse, depth));
        }

        return rate;
    }
}