/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.domain.WarehouseReview;
import com.mycompany.myapp.domain.WarehouseReview_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.UserRepository;
import com.mycompany.myapp.repository.WarehouseReviewRepository;

/**
 * A simple DTO Facility for WarehouseReview.
 */
@Service
public class WarehouseReviewDTOService {

    @Inject
    private WarehouseReviewRepository warehouseReviewRepository;
    @Inject
    private UserDTOService userDTOService;
    @Inject
    private UserRepository userRepository;

    @Transactional(readOnly = true)
    public WarehouseReviewDTO findOne(Integer id) {
        return toDTO(warehouseReviewRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WarehouseReviewDTO> complete(String query, int maxResults) {
        List<WarehouseReview> results = warehouseReviewRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WarehouseReviewDTO> findAll(PageRequestByExample<WarehouseReviewDTO> req) {
        Example<WarehouseReview> example = null;
        WarehouseReview warehouseReview = toEntity(req.example);

        if (warehouseReview != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(WarehouseReview_.responsiveness.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(WarehouseReview_.comments.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(warehouseReview, matcher);
        }

        Page<WarehouseReview> page;
        if (example != null) {
            page = warehouseReviewRepository.findAll(example, req.toPageable());
        } else {
            page = warehouseReviewRepository.findAll(req.toPageable());
        }

        List<WarehouseReviewDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WarehouseReviewDTO save(WarehouseReviewDTO dto) {
        if (dto == null) {
            return null;
        }

        final WarehouseReview warehouseReview;

        if (dto.isIdSet()) {
            WarehouseReview warehouseReviewTmp = warehouseReviewRepository.findOne(dto.id);
            if (warehouseReviewTmp != null) {
                warehouseReview = warehouseReviewTmp;
            } else {
                warehouseReview = new WarehouseReview();
                warehouseReview.setId(dto.id);
            }
        } else {
            warehouseReview = new WarehouseReview();
        }

        warehouseReview.setOverallRating(dto.overallRating);

        warehouseReview.setTurnaroundTime(dto.turnaroundTime);

        warehouseReview.setResponsiveness(dto.responsiveness);

        warehouseReview.setComments(dto.comments);

        warehouseReview.setCreationDate(dto.creationDate);

        warehouseReview.setCreationAuthor(dto.creationAuthor);

        warehouseReview.setLastModificationDate(dto.lastModificationDate);

        warehouseReview.setLastModificationAuthor(dto.lastModificationAuthor);

        warehouseReview.setVersion(dto.version);

        if (dto.user == null) {
            warehouseReview.setUser(null);
        } else {
            User user = warehouseReview.getUser();
            if (user == null || (user.getId().compareTo(dto.user.id) != 0)) {
                warehouseReview.setUser(userRepository.findOne(dto.user.id));
            }
        }

        return toDTO(warehouseReviewRepository.save(warehouseReview));
    }

    /**
     * Converts the passed warehouseReview to a DTO.
     */
    public WarehouseReviewDTO toDTO(WarehouseReview warehouseReview) {
        return toDTO(warehouseReview, 1);
    }

    /**
     * Converts the passed warehouseReview to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param warehouseReview
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WarehouseReviewDTO toDTO(WarehouseReview warehouseReview, int depth) {
        if (warehouseReview == null) {
            return null;
        }

        WarehouseReviewDTO dto = new WarehouseReviewDTO();

        dto.id = warehouseReview.getId();
        dto.overallRating = warehouseReview.getOverallRating();
        dto.turnaroundTime = warehouseReview.getTurnaroundTime();
        dto.responsiveness = warehouseReview.getResponsiveness();
        dto.comments = warehouseReview.getComments();
        dto.creationDate = warehouseReview.getCreationDate();
        dto.creationAuthor = warehouseReview.getCreationAuthor();
        dto.lastModificationDate = warehouseReview.getLastModificationDate();
        dto.lastModificationAuthor = warehouseReview.getLastModificationAuthor();
        dto.version = warehouseReview.getVersion();
        if (depth-- > 0) {
            dto.user = userDTOService.toDTO(warehouseReview.getUser(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a WarehouseReview.
     * Convenient for query by example.
     */
    public WarehouseReview toEntity(WarehouseReviewDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a WarehouseReview.
     * Convenient for query by example.
     */
    public WarehouseReview toEntity(WarehouseReviewDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        WarehouseReview warehouseReview = new WarehouseReview();

        warehouseReview.setId(dto.id);
        warehouseReview.setOverallRating(dto.overallRating);
        warehouseReview.setTurnaroundTime(dto.turnaroundTime);
        warehouseReview.setResponsiveness(dto.responsiveness);
        warehouseReview.setComments(dto.comments);
        warehouseReview.setCreationDate(dto.creationDate);
        warehouseReview.setCreationAuthor(dto.creationAuthor);
        warehouseReview.setLastModificationDate(dto.lastModificationDate);
        warehouseReview.setLastModificationAuthor(dto.lastModificationAuthor);
        warehouseReview.setVersion(dto.version);
        if (depth-- > 0) {
            warehouseReview.setUser(userDTOService.toEntity(dto.user, depth));
        }

        return warehouseReview;
    }
}