/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Goods;
import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.domain.WarehouseSearch;
import com.mycompany.myapp.domain.Warehouse_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.GoodsRepository;
import com.mycompany.myapp.repository.WarehouseRepository;

import com.mycompany.myapp.specifications.WarehouseSpecifications;

/**
 * A simple DTO Facility for Warehouse.
 */
@Service
public class WarehouseDTOService {

    @Inject
    private WarehouseRepository warehouseRepository;
    
    @Inject
    private GoodsDTOService goodsDTOService;
    @Inject
    private GoodsRepository goodsRepository;

    @Transactional(readOnly = true)
    public WarehouseDTO findOne(Integer id) {
        return toDTO(warehouseRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WarehouseDTO> complete(String query, int maxResults) {
        List<Warehouse> results = warehouseRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WarehouseDTO> findAll(PageRequestByExample<WarehouseDTO> req) {
        Example<Warehouse> example = null;
        Warehouse warehouse = toEntity(req.example);

        if (warehouse != null) {
            ExampleMatcher matcher = ExampleMatcher.matchingAny() //
                    .withMatcher(Warehouse_.name.getName(), match -> match.ignoreCase().contains())
                    .withMatcher(Warehouse_.type.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.description.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.address.getName(), match -> match.ignoreCase().contains())
                    .withMatcher(Warehouse_.phone2.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.fulfilmentType.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.storagePriceUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.minHirePeriod.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.depositUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.facilitySizeUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.storageSizeUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.operatingDays.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.operatingHours.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.wmsVendor.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.racking.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.maxStorageHeightUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.maxStorageWeightUom.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.handlingEquipment.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.temperatureRange.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.structureType.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.fleetAccess.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.powerSanctioned.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.waterConnection.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.powerBackup.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.craneServices.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.fireSystems.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.security.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.lift.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.toilet.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.parking.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.yard.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.facilityCertification.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.faciltiyInsurance.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.importExport.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.inboundServices.getName(), match -> match.ignoreCase().contains())
                    .withMatcher(Warehouse_.outboundServices.getName(), match -> match.ignoreCase().contains())
                    .withMatcher(Warehouse_.valueAddedServices.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.laborServices.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Warehouse_.distributionServices.getName(), match -> match.ignoreCase().startsWith())
                    ;

            example = Example.of(warehouse, matcher);
        }

        Page<Warehouse> page;
        if (example != null) {
            page = warehouseRepository.findAll(example, req.toPageable());
//        	page = warehouseRepository.findSome(example, req.toPageable());
        } else {
            page = warehouseRepository.findAll(req.toPageable());
//        	page = warehouseRepository.findSome(req.toPageable());
        }

        List<WarehouseDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WarehouseDTO save(WarehouseDTO dto) {
        if (dto == null) {
            return null;
        }

        final Warehouse warehouse;

        if (dto.isIdSet()) {
            Warehouse warehouseTmp = warehouseRepository.findOne(dto.id);
            if (warehouseTmp != null) {
                warehouse = warehouseTmp;
            } else {
                warehouse = new Warehouse();
                warehouse.setId(dto.id);
            }
        } else {
            warehouse = new Warehouse();
        }

        warehouse.setName(dto.name);

        warehouse.setRating(dto.rating);

        warehouse.setType(dto.type);

        warehouse.setDescription(dto.description);

        warehouse.setAddress(dto.address);

        warehouse.setPhone1(dto.phone1);

        warehouse.setPhone2(dto.phone2);

        warehouse.setFulfilmentType(dto.fulfilmentType);

        warehouse.setStoragePrice(dto.storagePrice);

        warehouse.setStoragePriceUom(dto.storagePriceUom);

        warehouse.setMinHirePeriod(dto.minHirePeriod);

        warehouse.setDeposit(dto.deposit);

        warehouse.setDepositUom(dto.depositUom);

        warehouse.setFacilitySize(dto.facilitySize);

        warehouse.setFacilitySizeUom(dto.facilitySizeUom);

        warehouse.setStorageSize(dto.storageSize);

        warehouse.setStorageSizeUom(dto.storageSizeUom);

        warehouse.setOperatingDays(dto.operatingDays);

        warehouse.setOperatingHours(dto.operatingHours);

        warehouse.setNoOfReceivingDoors(dto.noOfReceivingDoors);

        warehouse.setNoOfShippingDoors(dto.noOfShippingDoors);

        warehouse.setWmsVendor(dto.wmsVendor);

        warehouse.setRacking(dto.racking);

        warehouse.setMaxStorageHeight(dto.maxStorageHeight);

        warehouse.setMaxStorageHeightUom(dto.maxStorageHeightUom);

        warehouse.setMaxStorageWeight(dto.maxStorageWeight);

        warehouse.setMaxStorageWeightUom(dto.maxStorageWeightUom);

        warehouse.setHandlingEquipment(dto.handlingEquipment);

        warehouse.setTemperatureRange(dto.temperatureRange);

        warehouse.setStructureType(dto.structureType);

        warehouse.setYearOfConstruction(dto.yearOfConstruction);

        warehouse.setFleetAccess(dto.fleetAccess);

        warehouse.setPowerSanctioned(dto.powerSanctioned);

        warehouse.setWaterConnection(dto.waterConnection);

        warehouse.setPowerBackup(dto.powerBackup);

        warehouse.setCraneServices(dto.craneServices);

        warehouse.setFireSystems(dto.fireSystems);

        warehouse.setSecurity(dto.security);

        warehouse.setLift(dto.lift);

        warehouse.setToilet(dto.toilet);

        warehouse.setParking(dto.parking);

        warehouse.setDistanceFromMainRoad(dto.distanceFromMainRoad);

        warehouse.setYard(dto.yard);

        warehouse.setFacilityCertification(dto.facilityCertification);

        warehouse.setFaciltiyInsurance(dto.faciltiyInsurance);

        warehouse.setImportExport(dto.importExport);

        warehouse.setInboundServices(dto.inboundServices);

        warehouse.setOutboundServices(dto.outboundServices);

        warehouse.setValueAddedServices(dto.valueAddedServices);

        warehouse.setLaborServices(dto.laborServices);

        warehouse.setTotalLabor(dto.totalLabor);

        warehouse.setDistributionServices(dto.distributionServices);

        warehouse.setCreationDate(dto.creationDate);

        warehouse.setCreationAuthor(dto.creationAuthor);

        warehouse.setLastModificationDate(dto.lastModificationDate);

        warehouse.setLastModificationAuthor(dto.lastModificationAuthor);

        warehouse.setVersion(dto.version);

        return toDTO(warehouseRepository.save(warehouse));
    }

    /**
     * Converts the passed warehouse to a DTO.
     */
    public WarehouseDTO toDTO(Warehouse warehouse) {
        return toDTO(warehouse, 1);
    }

    /**
     * Converts the passed warehouse to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param warehouse
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WarehouseDTO toDTO(Warehouse warehouse, int depth) {
        if (warehouse == null) {
            return null;
        }

        WarehouseDTO dto = new WarehouseDTO();

        dto.id = warehouse.getId();
        dto.name = warehouse.getName();
        dto.rating = warehouse.getRating();
        dto.type = warehouse.getType();
        dto.description = warehouse.getDescription();
        dto.address = warehouse.getAddress();
        dto.phone1 = warehouse.getPhone1();
        dto.phone2 = warehouse.getPhone2();
        dto.fulfilmentType = warehouse.getFulfilmentType();
        dto.storagePrice = warehouse.getStoragePrice();
        dto.storagePriceUom = warehouse.getStoragePriceUom();
        dto.minHirePeriod = warehouse.getMinHirePeriod();
        dto.deposit = warehouse.getDeposit();
        dto.depositUom = warehouse.getDepositUom();
        dto.facilitySize = warehouse.getFacilitySize();
        dto.facilitySizeUom = warehouse.getFacilitySizeUom();
        dto.storageSize = warehouse.getStorageSize();
        dto.storageSizeUom = warehouse.getStorageSizeUom();
        dto.operatingDays = warehouse.getOperatingDays();
        dto.operatingHours = warehouse.getOperatingHours();
        dto.noOfReceivingDoors = warehouse.getNoOfReceivingDoors();
        dto.noOfShippingDoors = warehouse.getNoOfShippingDoors();
        dto.wmsVendor = warehouse.getWmsVendor();
        dto.racking = warehouse.getRacking();
        dto.maxStorageHeight = warehouse.getMaxStorageHeight();
        dto.maxStorageHeightUom = warehouse.getMaxStorageHeightUom();
        dto.maxStorageWeight = warehouse.getMaxStorageWeight();
        dto.maxStorageWeightUom = warehouse.getMaxStorageWeightUom();
        dto.handlingEquipment = warehouse.getHandlingEquipment();
        dto.temperatureRange = warehouse.getTemperatureRange();
        dto.structureType = warehouse.getStructureType();
        dto.yearOfConstruction = warehouse.getYearOfConstruction();
        dto.fleetAccess = warehouse.getFleetAccess();
        dto.powerSanctioned = warehouse.getPowerSanctioned();
        dto.waterConnection = warehouse.getWaterConnection();
        dto.powerBackup = warehouse.getPowerBackup();
        dto.craneServices = warehouse.getCraneServices();
        dto.fireSystems = warehouse.getFireSystems();
        dto.security = warehouse.getSecurity();
        dto.lift = warehouse.getLift();
        dto.toilet = warehouse.getToilet();
        dto.parking = warehouse.getParking();
        dto.distanceFromMainRoad = warehouse.getDistanceFromMainRoad();
        dto.yard = warehouse.getYard();
        dto.facilityCertification = warehouse.getFacilityCertification();
        dto.faciltiyInsurance = warehouse.getFaciltiyInsurance();
        dto.importExport = warehouse.getImportExport();
        dto.inboundServices = warehouse.getInboundServices();
        dto.outboundServices = warehouse.getOutboundServices();
        dto.valueAddedServices = warehouse.getValueAddedServices();
        dto.laborServices = warehouse.getLaborServices();
        dto.totalLabor = warehouse.getTotalLabor();
        dto.distributionServices = warehouse.getDistributionServices();
        dto.creationDate = warehouse.getCreationDate();
        dto.creationAuthor = warehouse.getCreationAuthor();
        dto.lastModificationDate = warehouse.getLastModificationDate();
        dto.lastModificationAuthor = warehouse.getLastModificationAuthor();
        dto.version = warehouse.getVersion();
        
        if (depth-- > 0) {
       	 final int fdepth = depth;
         dto.theGoods = warehouse.getGoods().stream().map(aGood -> goodsDTOService.toDTO(aGood, fdepth)).collect(Collectors.toList());
       }
        
        return dto;
    }

    /**
     * Converts the passed dto to a Warehouse.
     * Convenient for query by example.
     */
    public Warehouse toEntity(WarehouseDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Warehouse.
     * Convenient for query by example.
     */
    public Warehouse toEntity(WarehouseDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Warehouse warehouse = new Warehouse();

        warehouse.setId(dto.id);
        warehouse.setName(dto.name);
        warehouse.setRating(dto.rating);
        warehouse.setType(dto.type);
        warehouse.setDescription(dto.description);
        warehouse.setAddress(dto.address);
        warehouse.setPhone1(dto.phone1);
        warehouse.setPhone2(dto.phone2);
        warehouse.setFulfilmentType(dto.fulfilmentType);
        warehouse.setStoragePrice(dto.storagePrice);
        warehouse.setStoragePriceUom(dto.storagePriceUom);
        warehouse.setMinHirePeriod(dto.minHirePeriod);
        warehouse.setDeposit(dto.deposit);
        warehouse.setDepositUom(dto.depositUom);
        warehouse.setFacilitySize(dto.facilitySize);
        warehouse.setFacilitySizeUom(dto.facilitySizeUom);
        warehouse.setStorageSize(dto.storageSize);
        warehouse.setStorageSizeUom(dto.storageSizeUom);
        warehouse.setOperatingDays(dto.operatingDays);
        warehouse.setOperatingHours(dto.operatingHours);
        warehouse.setNoOfReceivingDoors(dto.noOfReceivingDoors);
        warehouse.setNoOfShippingDoors(dto.noOfShippingDoors);
        warehouse.setWmsVendor(dto.wmsVendor);
        warehouse.setRacking(dto.racking);
        warehouse.setMaxStorageHeight(dto.maxStorageHeight);
        warehouse.setMaxStorageHeightUom(dto.maxStorageHeightUom);
        warehouse.setMaxStorageWeight(dto.maxStorageWeight);
        warehouse.setMaxStorageWeightUom(dto.maxStorageWeightUom);
        warehouse.setHandlingEquipment(dto.handlingEquipment);
        warehouse.setTemperatureRange(dto.temperatureRange);
        warehouse.setStructureType(dto.structureType);
        warehouse.setYearOfConstruction(dto.yearOfConstruction);
        warehouse.setFleetAccess(dto.fleetAccess);
        warehouse.setPowerSanctioned(dto.powerSanctioned);
        warehouse.setWaterConnection(dto.waterConnection);
        warehouse.setPowerBackup(dto.powerBackup);
        warehouse.setCraneServices(dto.craneServices);
        warehouse.setFireSystems(dto.fireSystems);
        warehouse.setSecurity(dto.security);
        warehouse.setLift(dto.lift);
        warehouse.setToilet(dto.toilet);
        warehouse.setParking(dto.parking);
        warehouse.setDistanceFromMainRoad(dto.distanceFromMainRoad);
        warehouse.setYard(dto.yard);
        warehouse.setFacilityCertification(dto.facilityCertification);
        warehouse.setFaciltiyInsurance(dto.faciltiyInsurance);
        warehouse.setImportExport(dto.importExport);
        warehouse.setInboundServices(dto.inboundServices);
        warehouse.setOutboundServices(dto.outboundServices);
        warehouse.setValueAddedServices(dto.valueAddedServices);
        warehouse.setLaborServices(dto.laborServices);
        warehouse.setTotalLabor(dto.totalLabor);
        warehouse.setDistributionServices(dto.distributionServices);
        warehouse.setCreationDate(dto.creationDate);
        warehouse.setCreationAuthor(dto.creationAuthor);
        warehouse.setLastModificationDate(dto.lastModificationDate);
        warehouse.setLastModificationAuthor(dto.lastModificationAuthor);
        warehouse.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return warehouse;
    }
    
    @Transactional(readOnly = true)
    public PageResponse<WarehouseDTO> findAllBySearch(PageRequestByExample<WarehouseSearchDTO> req) {
        WarehouseSearch warehouseSearch = toSearchEntity(req.example);

        Page<Warehouse> page;
        if (warehouseSearch != null) {
        	Specification<Warehouse> searchSpec = WarehouseSpecifications.searchSpecifications(warehouseSearch);
            page = warehouseRepository.findAll(searchSpec,req.toPageable());
        } else {
            page = warehouseRepository.findAll(req.toPageable());
        }

        List<WarehouseDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

	private WarehouseSearch toSearchEntity(WarehouseSearchDTO dto) {
		return toSearchEntity(dto, 1);
	}

	private WarehouseSearch toSearchEntity(WarehouseSearchDTO dto, int i) {
		if(dto == null)
		{
			return null;
		}
		
		WarehouseSearch warehouseSearch = new WarehouseSearch();
		
		warehouseSearch.setLocation(dto.location);
        warehouseSearch.setType(dto.type);
        warehouseSearch.setMinStorageSize(dto.minStorageSize);
        warehouseSearch.setMaxStorageSize(dto.maxStorageSize);
        
        return warehouseSearch;
	}

}