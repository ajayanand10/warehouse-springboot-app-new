/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Enquiry;
import com.mycompany.myapp.domain.Enquiry_;
import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.EnquiryRepository;
import com.mycompany.myapp.repository.UserRepository;
import com.mycompany.myapp.repository.WarehouseRepository;

/**
 * A simple DTO Facility for Enquiry.
 */
@Service
public class EnquiryDTOService {

    @Inject
    private EnquiryRepository enquiryRepository;
    @Inject
    private UserDTOService userDTOService;
    @Inject
    private UserRepository userRepository;
    @Inject
    private WarehouseDTOService warehouseDTOService;
    @Inject
    private WarehouseRepository warehouseRepository;

    @Transactional(readOnly = true)
    public EnquiryDTO findOne(Integer id) {
        return toDTO(enquiryRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<EnquiryDTO> complete(String query, int maxResults) {
        List<Enquiry> results = enquiryRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<EnquiryDTO> findAll(PageRequestByExample<EnquiryDTO> req) {
        Example<Enquiry> example = null;
        Enquiry enquiry = toEntity(req.example);

        if (enquiry != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Enquiry_.description.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(enquiry, matcher);
        }

        Page<Enquiry> page;
        if (example != null) {
            page = enquiryRepository.findAll(example, req.toPageable());
        } else {
            page = enquiryRepository.findAll(req.toPageable());
        }

        List<EnquiryDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public EnquiryDTO save(EnquiryDTO dto) {
        if (dto == null) {
            return null;
        }

        final Enquiry enquiry;

        if (dto.isIdSet()) {
            Enquiry enquiryTmp = enquiryRepository.findOne(dto.id);
            if (enquiryTmp != null) {
                enquiry = enquiryTmp;
            } else {
                enquiry = new Enquiry();
                enquiry.setId(dto.id);
            }
        } else {
            enquiry = new Enquiry();
        }

        enquiry.setDescription(dto.description);

        enquiry.setCreationDate(dto.creationDate);

        enquiry.setCreationAuthor(dto.creationAuthor);

        enquiry.setLastModificationDate(dto.lastModificationDate);

        enquiry.setLastModificationAuthor(dto.lastModificationAuthor);

        enquiry.setVersion(dto.version);

        if (dto.user == null) {
            enquiry.setUser(null);
        } else {
            User user = enquiry.getUser();
            if (user == null || (user.getId().compareTo(dto.user.id) != 0)) {
                enquiry.setUser(userRepository.findOne(dto.user.id));
            }
        }

        if (dto.warehouse == null) {
            enquiry.setWarehouse(null);
        } else {
            Warehouse warehouse = enquiry.getWarehouse();
            if (warehouse == null || (warehouse.getId().compareTo(dto.warehouse.id) != 0)) {
                enquiry.setWarehouse(warehouseRepository.findOne(dto.warehouse.id));
            }
        }

        return toDTO(enquiryRepository.save(enquiry));
    }

    /**
     * Converts the passed enquiry to a DTO.
     */
    public EnquiryDTO toDTO(Enquiry enquiry) {
        return toDTO(enquiry, 1);
    }

    /**
     * Converts the passed enquiry to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param enquiry
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public EnquiryDTO toDTO(Enquiry enquiry, int depth) {
        if (enquiry == null) {
            return null;
        }

        EnquiryDTO dto = new EnquiryDTO();

        dto.id = enquiry.getId();
        dto.description = enquiry.getDescription();
        dto.creationDate = enquiry.getCreationDate();
        dto.creationAuthor = enquiry.getCreationAuthor();
        dto.lastModificationDate = enquiry.getLastModificationDate();
        dto.lastModificationAuthor = enquiry.getLastModificationAuthor();
        dto.version = enquiry.getVersion();
        if (depth-- > 0) {
            dto.user = userDTOService.toDTO(enquiry.getUser(), depth);
            dto.warehouse = warehouseDTOService.toDTO(enquiry.getWarehouse(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Enquiry.
     * Convenient for query by example.
     */
    public Enquiry toEntity(EnquiryDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Enquiry.
     * Convenient for query by example.
     */
    public Enquiry toEntity(EnquiryDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Enquiry enquiry = new Enquiry();

        enquiry.setId(dto.id);
        enquiry.setDescription(dto.description);
        enquiry.setCreationDate(dto.creationDate);
        enquiry.setCreationAuthor(dto.creationAuthor);
        enquiry.setLastModificationDate(dto.lastModificationDate);
        enquiry.setLastModificationAuthor(dto.lastModificationAuthor);
        enquiry.setVersion(dto.version);
        if (depth-- > 0) {
            enquiry.setUser(userDTOService.toEntity(dto.user, depth));
            enquiry.setWarehouse(warehouseDTOService.toEntity(dto.warehouse, depth));
        }

        return enquiry;
    }
}