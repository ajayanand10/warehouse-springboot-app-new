/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.User;
import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.domain.WarehouseServiceProvider;
import com.mycompany.myapp.domain.WarehouseServiceProviderPk;
import com.mycompany.myapp.domain.WarehouseServiceProvider_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.UserRepository;
import com.mycompany.myapp.repository.WarehouseRepository;
import com.mycompany.myapp.repository.WarehouseServiceProviderRepository;

/**
 * A simple DTO Facility for WarehouseServiceProvider.
 */
@Service
public class WarehouseServiceProviderDTOService {

    @Inject
    private WarehouseServiceProviderRepository warehouseServiceProviderRepository;
    @Inject
    private UserDTOService userDTOService;
    @Inject
    private UserRepository userRepository;
    @Inject
    private WarehouseDTOService warehouseDTOService;
    @Inject
    private WarehouseRepository warehouseRepository;

    @Transactional(readOnly = true)
    public WarehouseServiceProviderDTO findOne(WarehouseServiceProviderPk id) {
        return toDTO(warehouseServiceProviderRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WarehouseServiceProviderDTO> complete(String query, int maxResults) {
        List<WarehouseServiceProvider> results = warehouseServiceProviderRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WarehouseServiceProviderDTO> findAll(PageRequestByExample<WarehouseServiceProviderDTO> req) {
        Example<WarehouseServiceProvider> example = null;
        WarehouseServiceProvider warehouseServiceProvider = toEntity(req.example);

        if (warehouseServiceProvider != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(warehouseServiceProvider, matcher);
        }

        Page<WarehouseServiceProvider> page;
        if (example != null) {
            page = warehouseServiceProviderRepository.findAll(example, req.toPageable());
        } else {
            page = warehouseServiceProviderRepository.findAll(req.toPageable());
        }

        List<WarehouseServiceProviderDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WarehouseServiceProviderDTO save(WarehouseServiceProviderDTO dto) {
        if (dto == null) {
            return null;
        }

        final WarehouseServiceProvider warehouseServiceProvider;

        if (dto.isIdSet()) {
            WarehouseServiceProvider warehouseServiceProviderTmp = warehouseServiceProviderRepository.findOne(dto.id);
            if (warehouseServiceProviderTmp != null) {
                warehouseServiceProvider = warehouseServiceProviderTmp;
            } else {
                warehouseServiceProvider = new WarehouseServiceProvider();
                warehouseServiceProvider.setId(dto.id);
            }
        } else {
            warehouseServiceProvider = new WarehouseServiceProvider();
        }

        warehouseServiceProvider.setCreationDate(dto.creationDate);

        warehouseServiceProvider.setCreationAuthor(dto.creationAuthor);

        warehouseServiceProvider.setLastModificationDate(dto.lastModificationDate);

        warehouseServiceProvider.setLastModificationAuthor(dto.lastModificationAuthor);

        warehouseServiceProvider.setVersion(dto.version);

        if (dto.user == null) {
            warehouseServiceProvider.setUser(null);
        } else {
            User user = warehouseServiceProvider.getUser();
            if (user == null || (user.getId().compareTo(dto.user.id) != 0)) {
                warehouseServiceProvider.setUser(userRepository.findOne(dto.user.id));
            }
        }

        if (dto.warehouse == null) {
            warehouseServiceProvider.setWarehouse(null);
        } else {
            Warehouse warehouse = warehouseServiceProvider.getWarehouse();
            if (warehouse == null || (warehouse.getId().compareTo(dto.warehouse.id) != 0)) {
                warehouseServiceProvider.setWarehouse(warehouseRepository.findOne(dto.warehouse.id));
            }
        }

        return toDTO(warehouseServiceProviderRepository.save(warehouseServiceProvider));
    }

    /**
     * Converts the passed warehouseServiceProvider to a DTO.
     */
    public WarehouseServiceProviderDTO toDTO(WarehouseServiceProvider warehouseServiceProvider) {
        return toDTO(warehouseServiceProvider, 1);
    }

    /**
     * Converts the passed warehouseServiceProvider to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param warehouseServiceProvider
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WarehouseServiceProviderDTO toDTO(WarehouseServiceProvider warehouseServiceProvider, int depth) {
        if (warehouseServiceProvider == null) {
            return null;
        }

        WarehouseServiceProviderDTO dto = new WarehouseServiceProviderDTO();

        dto.id = warehouseServiceProvider.getId();
        dto.creationDate = warehouseServiceProvider.getCreationDate();
        dto.creationAuthor = warehouseServiceProvider.getCreationAuthor();
        dto.lastModificationDate = warehouseServiceProvider.getLastModificationDate();
        dto.lastModificationAuthor = warehouseServiceProvider.getLastModificationAuthor();
        dto.version = warehouseServiceProvider.getVersion();
        if (depth-- > 0) {
            dto.user = userDTOService.toDTO(warehouseServiceProvider.getUser(), depth);
            dto.warehouse = warehouseDTOService.toDTO(warehouseServiceProvider.getWarehouse(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a WarehouseServiceProvider.
     * Convenient for query by example.
     */
    public WarehouseServiceProvider toEntity(WarehouseServiceProviderDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a WarehouseServiceProvider.
     * Convenient for query by example.
     */
    public WarehouseServiceProvider toEntity(WarehouseServiceProviderDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        WarehouseServiceProvider warehouseServiceProvider = new WarehouseServiceProvider();

        warehouseServiceProvider.setId(dto.id);
        warehouseServiceProvider.setCreationDate(dto.creationDate);
        warehouseServiceProvider.setCreationAuthor(dto.creationAuthor);
        warehouseServiceProvider.setLastModificationDate(dto.lastModificationDate);
        warehouseServiceProvider.setLastModificationAuthor(dto.lastModificationAuthor);
        warehouseServiceProvider.setVersion(dto.version);
        if (depth-- > 0) {
            warehouseServiceProvider.setUser(userDTOService.toEntity(dto.user, depth));
            warehouseServiceProvider.setWarehouse(warehouseDTOService.toEntity(dto.warehouse, depth));
        }

        return warehouseServiceProvider;
    }
}