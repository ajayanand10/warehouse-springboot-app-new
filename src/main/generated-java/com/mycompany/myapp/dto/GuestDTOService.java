/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Guest;
import com.mycompany.myapp.domain.Guest_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.GuestRepository;

/**
 * A simple DTO Facility for Guest.
 */
@Service
public class GuestDTOService {

    @Inject
    private GuestRepository guestRepository;

    @Transactional(readOnly = true)
    public GuestDTO findOne(Integer id) {
        return toDTO(guestRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<GuestDTO> complete(String query, int maxResults) {
        List<Guest> results = guestRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<GuestDTO> findAll(PageRequestByExample<GuestDTO> req) {
        Example<Guest> example = null;
        Guest guest = toEntity(req.example);

        if (guest != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(guest, matcher);
        }

        Page<Guest> page;
        if (example != null) {
            page = guestRepository.findAll(example, req.toPageable());
        } else {
            page = guestRepository.findAll(req.toPageable());
        }

        List<GuestDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public GuestDTO save(GuestDTO dto) {
        if (dto == null) {
            return null;
        }

        final Guest guest;

        if (dto.isIdSet()) {
            Guest guestTmp = guestRepository.findOne(dto.id);
            if (guestTmp != null) {
                guest = guestTmp;
            } else {
                guest = new Guest();
                guest.setId(dto.id);
            }
        } else {
            guest = new Guest();
        }

        guest.setCreationDate(dto.creationDate);

        guest.setCreationAuthor(dto.creationAuthor);

        guest.setLastModificationDate(dto.lastModificationDate);

        guest.setLastModificationAuthor(dto.lastModificationAuthor);

        guest.setVersion(dto.version);

        return toDTO(guestRepository.save(guest));
    }

    /**
     * Converts the passed guest to a DTO.
     */
    public GuestDTO toDTO(Guest guest) {
        return toDTO(guest, 1);
    }

    /**
     * Converts the passed guest to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param guest
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public GuestDTO toDTO(Guest guest, int depth) {
        if (guest == null) {
            return null;
        }

        GuestDTO dto = new GuestDTO();

        dto.id = guest.getId();
        dto.creationDate = guest.getCreationDate();
        dto.creationAuthor = guest.getCreationAuthor();
        dto.lastModificationDate = guest.getLastModificationDate();
        dto.lastModificationAuthor = guest.getLastModificationAuthor();
        dto.version = guest.getVersion();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Guest.
     * Convenient for query by example.
     */
    public Guest toEntity(GuestDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Guest.
     * Convenient for query by example.
     */
    public Guest toEntity(GuestDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Guest guest = new Guest();

        guest.setId(dto.id);
        guest.setCreationDate(dto.creationDate);
        guest.setCreationAuthor(dto.creationAuthor);
        guest.setLastModificationDate(dto.lastModificationDate);
        guest.setLastModificationAuthor(dto.lastModificationAuthor);
        guest.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return guest;
    }
}