/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.domain.WarehousePhoto;
import com.mycompany.myapp.domain.WarehousePhoto_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.WarehousePhotoRepository;
import com.mycompany.myapp.repository.WarehouseRepository;

/**
 * A simple DTO Facility for WarehousePhoto.
 */
@Service
public class WarehousePhotoDTOService {

    @Inject
    private WarehousePhotoRepository warehousePhotoRepository;
    @Inject
    private WarehouseDTOService warehouseDTOService;
    @Inject
    private WarehouseRepository warehouseRepository;

    @Transactional(readOnly = true)
    public WarehousePhotoDTO findOne(Integer id) {
        return toDTO(warehousePhotoRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<WarehousePhotoDTO> complete(String query, int maxResults) {
        List<WarehousePhoto> results = warehousePhotoRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<WarehousePhotoDTO> findAll(PageRequestByExample<WarehousePhotoDTO> req) {
        Example<WarehousePhoto> example = null;
        WarehousePhoto warehousePhoto = toEntity(req.example);

        if (warehousePhoto != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(WarehousePhoto_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(WarehousePhoto_.description.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(WarehousePhoto_.link.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(warehousePhoto, matcher);
        }

        Page<WarehousePhoto> page;
        if (example != null) {
            page = warehousePhotoRepository.findAll(example, req.toPageable());
        } else {
            page = warehousePhotoRepository.findAll(req.toPageable());
        }

        List<WarehousePhotoDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public WarehousePhotoDTO save(WarehousePhotoDTO dto) {
        if (dto == null) {
            return null;
        }

        final WarehousePhoto warehousePhoto;

        if (dto.isIdSet()) {
            WarehousePhoto warehousePhotoTmp = warehousePhotoRepository.findOne(dto.id);
            if (warehousePhotoTmp != null) {
                warehousePhoto = warehousePhotoTmp;
            } else {
                warehousePhoto = new WarehousePhoto();
                warehousePhoto.setId(dto.id);
            }
        } else {
            warehousePhoto = new WarehousePhoto();
        }

        warehousePhoto.setName(dto.name);

        warehousePhoto.setDescription(dto.description);

        warehousePhoto.setLink(dto.link);

        warehousePhoto.setCreationDate(dto.creationDate);

        warehousePhoto.setCreationAuthor(dto.creationAuthor);

        warehousePhoto.setLastModificationDate(dto.lastModificationDate);

        warehousePhoto.setLastModificationAuthor(dto.lastModificationAuthor);

        warehousePhoto.setVersion(dto.version);

        if (dto.warehouse == null) {
            warehousePhoto.setWarehouse(null);
        } else {
            Warehouse warehouse = warehousePhoto.getWarehouse();
            if (warehouse == null || (warehouse.getId().compareTo(dto.warehouse.id) != 0)) {
                warehousePhoto.setWarehouse(warehouseRepository.findOne(dto.warehouse.id));
            }
        }

        return toDTO(warehousePhotoRepository.save(warehousePhoto));
    }

    /**
     * Converts the passed warehousePhoto to a DTO.
     */
    public WarehousePhotoDTO toDTO(WarehousePhoto warehousePhoto) {
        return toDTO(warehousePhoto, 1);
    }

    /**
     * Converts the passed warehousePhoto to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param warehousePhoto
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public WarehousePhotoDTO toDTO(WarehousePhoto warehousePhoto, int depth) {
        if (warehousePhoto == null) {
            return null;
        }

        WarehousePhotoDTO dto = new WarehousePhotoDTO();

        dto.id = warehousePhoto.getId();
        dto.name = warehousePhoto.getName();
        dto.description = warehousePhoto.getDescription();
        dto.link = warehousePhoto.getLink();
        dto.creationDate = warehousePhoto.getCreationDate();
        dto.creationAuthor = warehousePhoto.getCreationAuthor();
        dto.lastModificationDate = warehousePhoto.getLastModificationDate();
        dto.lastModificationAuthor = warehousePhoto.getLastModificationAuthor();
        dto.version = warehousePhoto.getVersion();
        if (depth-- > 0) {
            dto.warehouse = warehouseDTOService.toDTO(warehousePhoto.getWarehouse(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a WarehousePhoto.
     * Convenient for query by example.
     */
    public WarehousePhoto toEntity(WarehousePhotoDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a WarehousePhoto.
     * Convenient for query by example.
     */
    public WarehousePhoto toEntity(WarehousePhotoDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        WarehousePhoto warehousePhoto = new WarehousePhoto();

        warehousePhoto.setId(dto.id);
        warehousePhoto.setName(dto.name);
        warehousePhoto.setDescription(dto.description);
        warehousePhoto.setLink(dto.link);
        warehousePhoto.setCreationDate(dto.creationDate);
        warehousePhoto.setCreationAuthor(dto.creationAuthor);
        warehousePhoto.setLastModificationDate(dto.lastModificationDate);
        warehousePhoto.setLastModificationAuthor(dto.lastModificationAuthor);
        warehousePhoto.setVersion(dto.version);
        if (depth-- > 0) {
            warehousePhoto.setWarehouse(warehouseDTOService.toEntity(dto.warehouse, depth));
        }

        return warehousePhoto;
    }
}