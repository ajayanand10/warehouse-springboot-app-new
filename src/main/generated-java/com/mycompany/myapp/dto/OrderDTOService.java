/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Order;
import com.mycompany.myapp.domain.Order_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.OrderRepository;

/**
 * A simple DTO Facility for Order.
 */
@Service
public class OrderDTOService {

    @Inject
    private OrderRepository orderRepository;

    @Transactional(readOnly = true)
    public OrderDTO findOne(Integer id) {
        return toDTO(orderRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<OrderDTO> complete(String query, int maxResults) {
        List<Order> results = orderRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<OrderDTO> findAll(PageRequestByExample<OrderDTO> req) {
        Example<Order> example = null;
        Order order = toEntity(req.example);

        if (order != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(order, matcher);
        }

        Page<Order> page;
        if (example != null) {
            page = orderRepository.findAll(example, req.toPageable());
        } else {
            page = orderRepository.findAll(req.toPageable());
        }

        List<OrderDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public OrderDTO save(OrderDTO dto) {
        if (dto == null) {
            return null;
        }

        final Order order;

        if (dto.isIdSet()) {
            Order orderTmp = orderRepository.findOne(dto.id);
            if (orderTmp != null) {
                order = orderTmp;
            } else {
                order = new Order();
                order.setId(dto.id);
            }
        } else {
            order = new Order();
        }

        order.setOrderDate(dto.orderDate);

        order.setCreationDate(dto.creationDate);

        order.setCreationAuthor(dto.creationAuthor);

        order.setLastModificationDate(dto.lastModificationDate);

        order.setLastModificationAuthor(dto.lastModificationAuthor);

        order.setVersion(dto.version);

        return toDTO(orderRepository.save(order));
    }

    /**
     * Converts the passed order to a DTO.
     */
    public OrderDTO toDTO(Order order) {
        return toDTO(order, 1);
    }

    /**
     * Converts the passed order to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param order
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public OrderDTO toDTO(Order order, int depth) {
        if (order == null) {
            return null;
        }

        OrderDTO dto = new OrderDTO();

        dto.id = order.getId();
        dto.orderDate = order.getOrderDate();
        dto.creationDate = order.getCreationDate();
        dto.creationAuthor = order.getCreationAuthor();
        dto.lastModificationDate = order.getLastModificationDate();
        dto.lastModificationAuthor = order.getLastModificationAuthor();
        dto.version = order.getVersion();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Order.
     * Convenient for query by example.
     */
    public Order toEntity(OrderDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Order.
     * Convenient for query by example.
     */
    public Order toEntity(OrderDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Order order = new Order();

        order.setId(dto.id);
        order.setOrderDate(dto.orderDate);
        order.setCreationDate(dto.creationDate);
        order.setCreationAuthor(dto.creationAuthor);
        order.setLastModificationDate(dto.lastModificationDate);
        order.setLastModificationAuthor(dto.lastModificationAuthor);
        order.setVersion(dto.version);
        if (depth-- > 0) {
        }

        return order;
    }
}