/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/repository/EntityRepository.java.e.vm
 */
package com.mycompany.myapp.repository;

import java.util.List;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.*;
import org.springframework.data.repository.query.Param;

import com.mycompany.myapp.domain.Warehouse;
import com.mycompany.myapp.domain.Warehouse_;
import com.mycompany.myapp.domain.WarehouseSearch;
import com.mycompany.myapp.domain.WarehouseSearchResults;
import com.mycompany.myapp.domain.WarehouseSummary;

public interface WarehouseRepository extends JpaRepository<Warehouse, Integer>, JpaSpecificationExecutor<Warehouse> {
	final String SEARCH_QUERY = "select w.id as id, w.name as name, w.lat as lat, w.lng as lng, w.rating as rating, w.storageSize as storageSize, w.storageSizeUom as storageSizeUom, w.storagePrice as storagePrice, w.storagePriceUom as storagePriceUom,w.facilitySize as facilitySize,w.facilitySizeUom  as facilitySizeUom from Warehouse w";
	final String SEARCH_QUERY_CONDITION = "select w.id as id, w.name as name, w.lat as lat, w.lng as lng, w.rating as rating, w.storageSize as storageSize, w.storageSizeUom as storageSizeUom, w.storagePrice as storagePrice, w.storagePriceUom as storagePriceUom,w.facilitySize as facilitySize,w.facilitySizeUom as facilitySizeUom from Warehouse w"
										+ " WHERE  w.type like %?1% AND w.address like %?2% AND w.storageSize >= ?3 AND w.storageSize<= ?4 ";
    
	default List<Warehouse> complete(String query, int maxResults) {
        Warehouse probe = new Warehouse();
        probe.setName(query);

        ExampleMatcher matcher = ExampleMatcher.matching() //
                .withMatcher(Warehouse_.name.getName(), match -> match.ignoreCase().startsWith());

        Page<Warehouse> page = findAll(Example.of(probe, matcher), new PageRequest(0, maxResults));
        return page.getContent();
    }
    
    
    
    @Query(SEARCH_QUERY)
    Page<WarehouseSummary> findAllForSearch(Pageable pageable);
    
    
    @Query(SEARCH_QUERY_CONDITION)
    Page<WarehouseSummary> findAllForSearch(String type,String location,int minStorageSize,int maxStorageSize,Pageable pageable);
//    Page<WarehouseSummary> findAllProjectedBy(String type,String location,int minStorageSize,int maxStorageSize,Pageable pageable);
    
}