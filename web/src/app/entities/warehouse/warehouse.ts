//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
// 
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/entities/entity.ts.e.vm
//
import {Goods} from '../goods/goods';

export class Warehouse {
    // Raw attributes
    id : number;
    name : string;
    rating : number;
    type : string;
    description : string;
    address : string;
    phone1 : string;
    phone2 : string;
    fulfilmentType : string;
    storagePrice : number;
    storagePriceUom : string;
    minHirePeriod : string;
    deposit : number;
    depositUom : string;
    facilitySize : number;
    facilitySizeUom : string;
    storageSize : number;
    storageSizeUom : string;
    operatingDays : string;
    operatingHours : string;
    noOfReceivingDoors : number;
    noOfShippingDoors : number;
    wmsVendor : string;
    racking : string;
    maxStorageHeight : number;
    maxStorageHeightUom : string;
    maxStorageWeight : number;
    maxStorageWeightUom : string;
    handlingEquipment : string;
    temperatureRange : string;
    structureType : string;
    yearOfConstruction : number;
    fleetAccess : string;
    powerSanctioned : string;
    waterConnection : string;
    powerBackup : string;
    craneServices : string;
    fireSystems : string;
    security : string;
    lift : string;
    toilet : string;
    parking : string;
    distanceFromMainRoad : number;
    yard : string;
    facilityCertification : string;
    faciltiyInsurance : string;
    importExport : string;
    inboundServices : string;
    outboundServices : string;
    valueAddedServices : string;
    laborServices : string;
    totalLabor : number;
    distributionServices : string;
    creationDate : Date;
    creationAuthor : string;
    lastModificationDate : Date;
    lastModificationAuthor : string;
    version : number;
    // many-to-many
    theGoods : Goods[];


    constructor(json? : any) {
        if (json != null) {
            this.id = json.id;
            this.name = json.name;
            this.rating = json.rating;
            this.type = json.type;
            this.description = json.description;
            this.address = json.address;
            this.phone1 = json.phone1;
            this.phone2 = json.phone2;
            this.fulfilmentType = json.fulfilmentType;
            this.storagePrice = json.storagePrice;
            this.storagePriceUom = json.storagePriceUom;
            this.minHirePeriod = json.minHirePeriod;
            this.deposit = json.deposit;
            this.depositUom = json.depositUom;
            this.facilitySize = json.facilitySize;
            this.facilitySizeUom = json.facilitySizeUom;
            this.storageSize = json.storageSize;
            this.storageSizeUom = json.storageSizeUom;
            this.operatingDays = json.operatingDays;
            this.operatingHours = json.operatingHours;
            this.noOfReceivingDoors = json.noOfReceivingDoors;
            this.noOfShippingDoors = json.noOfShippingDoors;
            this.wmsVendor = json.wmsVendor;
            this.racking = json.racking;
            this.maxStorageHeight = json.maxStorageHeight;
            this.maxStorageHeightUom = json.maxStorageHeightUom;
            this.maxStorageWeight = json.maxStorageWeight;
            this.maxStorageWeightUom = json.maxStorageWeightUom;
            this.handlingEquipment = json.handlingEquipment;
            this.temperatureRange = json.temperatureRange;
            this.structureType = json.structureType;
            this.yearOfConstruction = json.yearOfConstruction;
            this.fleetAccess = json.fleetAccess;
            this.powerSanctioned = json.powerSanctioned;
            this.waterConnection = json.waterConnection;
            this.powerBackup = json.powerBackup;
            this.craneServices = json.craneServices;
            this.fireSystems = json.fireSystems;
            this.security = json.security;
            this.lift = json.lift;
            this.toilet = json.toilet;
            this.parking = json.parking;
            this.distanceFromMainRoad = json.distanceFromMainRoad;
            this.yard = json.yard;
            this.facilityCertification = json.facilityCertification;
            this.faciltiyInsurance = json.faciltiyInsurance;
            this.importExport = json.importExport;
            this.inboundServices = json.inboundServices;
            this.outboundServices = json.outboundServices;
            this.valueAddedServices = json.valueAddedServices;
            this.laborServices = json.laborServices;
            this.totalLabor = json.totalLabor;
            this.distributionServices = json.distributionServices;
            if (json.creationDate != null) {
                this.creationDate = new Date(json.creationDate);
            }
            this.creationAuthor = json.creationAuthor;
            if (json.lastModificationDate != null) {
                this.lastModificationDate = new Date(json.lastModificationDate);
            }
            this.lastModificationAuthor = json.lastModificationAuthor;
            this.version = json.version;

            if (json.theGoods != null) {
                this.theGoods = Goods.toArray(json.theGoods);
            }
        }
    }

    // Utils

    static toArray(jsons : any[]) : Warehouse[] {
        let warehouses : Warehouse[] = [];
        if (jsons != null) {
            for (let json of jsons) {
                warehouses.push(new Warehouse(json));
            }
        }
        return warehouses;
    }
}
