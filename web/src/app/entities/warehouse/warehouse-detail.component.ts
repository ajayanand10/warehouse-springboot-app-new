//
// Project home: https://github.com/jaxio/celerio-angular-quickstart
// 
// Source code generated by Celerio, an Open Source code generator by Jaxio.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Source code: https://github.com/jaxio/celerio/
// Follow us on twitter: @jaxiosoft
// This header can be customized in Celerio conf...
// Template pack-angular:web/src/app/entities/entity-detail.component.ts.e.vm
//
import {Component, OnInit, OnDestroy, Input, Output, EventEmitter} from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { SelectItem } from 'primeng/primeng';
import { MessageService} from '../../service/message.service';
import {Warehouse} from './warehouse';
import {WarehouseService} from './warehouse.service';
import {Goods} from '../goods/goods';
import {GoodsService} from '../goods/goods.service';

@Component({
    moduleId: module.id,
	templateUrl: 'warehouse-detail.component.html',
	selector: 'warehouse-detail',
})
export class WarehouseDetailComponent implements OnInit, OnDestroy {
    warehouse : Warehouse;

    private params_subscription: any;

    sourceTheGoods : Goods[] = [];

    @Input() sub : boolean = false;
    @Output() onSaveClicked = new EventEmitter<Warehouse>();
    @Output() onCancelClicked = new EventEmitter();

    constructor(private route: ActivatedRoute, private router: Router, private messageService: MessageService, private warehouseService: WarehouseService, private goodsService : GoodsService) {
        goodsService.complete(null).
            subscribe(theGoods => this.sourceTheGoods = theGoods,
                        error =>  this.messageService.error('Constructor error', error));
    }

    ngOnInit() {
        if (this.sub) {
            return;
        }

        this.params_subscription = this.route.params.subscribe(params => {
            let id = params['id'];
            console.log('ngOnInit for warehouse-detail ' + id);

            if (id === 'new') {
                this.warehouse = new Warehouse();
            } else {
                this.warehouseService.getWarehouse(id)
                    .subscribe(warehouse => {
                            this.warehouse = warehouse;
                            this.sourceTheGoods = this.sourceTheGoods.filter(item => this.warehouse.theGoods.map((e) => e.id).indexOf(item.id) < 0);
                        },
                        error =>  this.messageService.error('ngOnInit error', error)
                    );
            }
        });
    }

    ngOnDestroy() {
        if (!this.sub) {
            this.params_subscription.unsubscribe();
        }
    }

    onSave() {
        this.warehouseService.update(this.warehouse).
            subscribe(
                warehouse => {
                    this.warehouse = warehouse;
                    if (this.sub) {
                        this.onSaveClicked.emit(this.warehouse);
                        this.messageService.info('Saved OK and msg emitted', 'Angular Rocks!')
                    } else {
                        this.messageService.info('Saved OK', 'Angular Rocks!')
                    }
                },
                error =>  this.messageService.error('Could not save', error)
            );
    }

    onCancel() {
        if (this.sub) {
            this.onCancelClicked.emit("cancel");
            this.messageService.info('Cancel clicked and msg emitted', 'Angular Rocks!')
        }
    }

}
